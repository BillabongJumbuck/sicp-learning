#lang sicp
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))

(define (prodect-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))

(define (inc x) (+ x 1))
(define (identity x) x)
(define (factorial n)
  (prodect-iter identity 1 inc n))

(define (pi-product b)
  (define (pi-term x)
    (if (even? x)
        (/ x (+ x 1))
        (/ (+ x 1) x)))
  (* 4 (product pi-term 2 inc b)))
                   