#lang sicp
(define (timed-prime-test n)
  (start-prime-test n (runtime)))

(define  (start-prime-test n start-time)
  (if (fast-prime? n 5)
      (report-prime n (- (runtime) start-time))
      false))

(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time)
  true)

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))
(define (square x)
  (* x x))
(define (even? n)
  (= (remainder n 2) 0))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (search-for-primes start count)
  (cond ((= count 0) ) 
        ((= 0 (remainder start 2)) (search-for-primes (+ 1 start) count))
        ((timed-prime-test start) (search-for-primes (+ 2 start) (- count 1)))
        (else (search-for-primes (+ 2 start) count))))
