#lang sicp
(define (accumulate pred? combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (if (pred? a) (combiner (term a) result) result))))
  (iter a null-value))

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x)
  (* x x))
(define (prime? n)
  (= (smallest-divisor n) n))

(define (inc x) (+ x 1))
(define (identity x) x)

(define (sum-primes a b)
  (accumulate prime? + 0 identity a inc b))



(define (relative-prime-product n)
  (define (relatively-prime? a)
    (define (gcd a b)
      (if (= b 0)
          a
          (gcd b (remainder a b))))
    (= (gcd n a) 1))
  (accumulate relatively-prime? * 1 identity 1 inc n))

