#lang sicp
(define (timed-prime-test n)
  (start-prime-test n (runtime)))

(define  (start-prime-test n start-time)
  (if (prime? n)
      (report-prime n (- (runtime) start-time))
      false))

(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time)
  true)

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (next test-divisor)
  (if (= test-divisor 2) 3 (+ test-divisor 2)))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x)
  (* x x))
(define (prime? n)
  (= (smallest-divisor n) n))

(define (search-for-primes start count)
  (cond ((= count 0) ) 
        ((= 0 (remainder start 2)) (search-for-primes (+ 1 start) count))
        ((timed-prime-test start) (search-for-primes (+ 2 start) (- count 1)))
        (else (search-for-primes (+ 2 start) count))))