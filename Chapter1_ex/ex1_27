#lang sicp
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))
(define (square x)
  (* x x))
(define (even? n)
  (= (remainder n 2) 0))

(define (carmichael? n)
  (define (carmichael?-iter n count)
    (cond ((= n count) true)
          ((= count (expmod count n n)) (carmichael?-iter n (+ count 1)))
          (else false)))
  (carmichael?-iter n 1))