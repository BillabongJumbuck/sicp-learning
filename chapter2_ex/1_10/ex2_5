#lang sicp
(define (square x)
  (* x x))
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (cons a b)
  (* (fast-expt 2 a) (fast-expt 3 b)))
(define (car a)
  (if (= (remainder a 2) 0)
      (+ 1 (car (/ a 2)))
      0))
(define (cdr a)
  (if (= (remainder a 3) 0)
      (+ 1 (cdr (/ a 3)))
      0))